# -*- coding: utf-8 -*-
"""Air Quality Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13mtMD9Wq1TvPhDdqNp9shquacWYOrdzy

Importing Dependencies
"""

import numpy as np
import pandas as pd

"""Data Collection And Processing"""

air_quality_data =pd.read_csv('/content/AirQualityUCI.csv')

air_quality_data.head()

air_quality_data = pd.read_csv('/content/AirQualityUCI.csv', sep=';')

"""All values are separated by ';' or a ','..."""

air_quality_data.head()

air_quality_data = pd.read_csv('/content/AirQualityUCI.csv', sep=';' , decimal=(','))

air_quality_data.head()

air_quality_data = air_quality_data.iloc[:, :-2]

air_quality_data.head()

air_quality_data.tail()

air_quality_data.shape

air_quality_data.loc[[9367]]

air_quality_data.loc[[9356]]

"""9356 represents the last row with values, the remaining rows are null values

Index = 9356

row =9357

take the first 9357 rows from the dataframe
"""

air_quality_data = air_quality_data.head(9357)

air_quality_data.head(10)

air_quality_data.tail(10)

air_quality_data.shape

air_quality_data.info()

air_quality_data.isnull().sum()

"""This Show there are no missing values in the dataset but, the actual missing values are represented by -200.  

This was described in the Documentation of the data set.
"""

air_quality_data.isin([-200]).sum(axis=0)

"""**Handling The Missing Values**

**bold text**

Convert all -200 to NaN

Replace all NaN values with the Mean of that specific column
"""

air_quality_data = air_quality_data.replace(to_replace=-200, value= np.NaN)

air_quality_data.isnull().sum()

"""This Shows The Actual Missing Values"""

air_quality_data.tail()

numeric_data = air_quality_data.drop(['Date', 'Time'], axis=1)
mean_values = numeric_data.mean()

print(mean_values)

air_quality_data = air_quality_data.fillna(mean_values)

air_quality_data.tail()

air_quality_data.isnull().sum()

date_info = pd.to_datetime(air_quality_data['Date'], format='%d/%m/%Y')
print(date_info)

time_info = pd.to_datetime(air_quality_data['Time'], format='%H.%M.%S').dt.time
print(time_info)

print(date_info)
print(time_info)

date_time = pd.concat([date_info, time_info], axis=1)

date_time.head()

date_time.shape

date_time['ds'] = date_time['Date'].astype(str) + ' ' + date_time['Time'].astype(str)

date_time.head()

date_time.info

"""we have to convert ds from object datatype to date time format"""

data = pd.DataFrame()

data['ds'] = pd.to_datetime(date_time['ds'])

data.head()

data['y'] = air_quality_data['RH']

data.head()

data.tail()

pip install prophet

from prophet import Prophet

model = Prophet()
model.fit(data)

future = model.make_future_dataframe(periods=365, freq='H')
future.tail()

forecast = model.predict(future)
forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].tail()

fig1 = model.plot(forecast)

fig2 = model.plot_components(forecast)